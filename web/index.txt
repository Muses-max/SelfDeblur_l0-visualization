<!DOCTYPE html>
<html lang="en">
<head>
    <link rel="stylesheet" type="text/css" href="bootstrap.min.css"  />
    <link rel="stylesheet" type="text/css" href="bootstrap-switch.min.css" />
    <script type="text/javascript" src="jquery.min.js"></script>
    <script type="text/javascript" src="bootstrap-switch.min.js"></script>
    <script type="text/javascript" src="vue.min.js"></script>
    <script type="text/javascript" src="axios.min.js"></script>
    <script type="text/javascript"  src="dist/echarts.min.js"></script>
    
    <style>
       .Start{
           text-decoration: none;
           width:100px;
           height:62px;
           background-color:#00ff00;
           border: none;
           outline: none;/* Remove the border after the clicking event */
        }
       .Start:hover{
           text-decoration: underline;
           width:100px;
           height:62px;
           background-color:#00ff00;
           border: none;
           outline: none;/* Remove the border after the clicking event */
        }
        .Stop{
           text-decoration: none;
           width:100px;
           height:62px;
           background-color:#ff0000;
           border: none;
           outline:none; /* Remove the border after the clicking event */
        }
        .Stop:hover{
           text-decoration: underline;
           width:100px;
           height:62px;
           background-color:#ff0000;
           border: none;
           outline: none; /* Remove the border after the clicking event */
        }
        .testswitch {
            position: relative;
            float: left; 
            width: 90px;
            margin: 0;
            -webkit-user-select:none; 
            -moz-user-select:none; 
            -ms-user-select: none;
        }

        .testswitch-checkbox {
            display: none;
        }

        .testswitch-label {
            display: block; 
            overflow: hidden; 
            cursor: pointer;
            border: 2px solid #999999; 
            border-radius: 20px;
        }

        .testswitch-inner {
            display: block; 
            width: 200%; 
            margin-left: -100%;
            transition: margin 0.3s ease-in 0s;
        }

        .testswitch-inner::before, .testswitch-inner::after {
            display: block; 
            float: right; 
            width: 50%; 
            height: 30px; 
            padding: 0; 
            line-height: 30px;
            font-size: 14px; 
            color: white; 
            font-family: 
            Trebuchet, Arial, sans-serif; 
            font-weight: bold;
            box-sizing: border-box;
        }

        .testswitch-inner::after {
            content: attr(data-on);
            padding-left: 10px;
            background-color: #ff8040; 
            color: #FFFFFF;
        }

        .testswitch-inner::before {
            content: attr(data-off);
            padding-right: 10px;
            background-color: #ff9bc1; 
            color: #999999;
            text-align: right;
        }

        .testswitch-switch {
            position: absolute; 
            display: block; 
            width: 22px;
            height: 22px;
            margin: 4px;
            background: #FFFFFF;
            top: 0; 
            bottom: 0;
            right: 56px;
            border: 2px solid #999999; 
            border-radius: 20px;
            transition: all 0.3s ease-in 0s;
        }

        .testswitch-checkbox:checked + .testswitch-label .testswitch-inner {
            margin-left: 0;
        }

        .testswitch-checkbox:checked + .testswitch-label .testswitch-switch {
            right: 0px; 
        }

    </style>
    
</head>
<body>
    <div id="startbutton">
        <button id="b1" :class="todo" v-on:Click="btnClick()"> {{todo}} </button>    
    </div>
   <div class="testswitch" id="raw-view-switch">
        <input class="testswitch-checkbox" id="onoffswitch" type="checkbox">
        <label class="testswitch-label" for="onoffswitch">
            <span class="testswitch-inner" data-on="RAW" data-off="VIEW"></span>
            <span class="testswitch-switch"></span>
        </label>
    </div>
    <div id="gpubars" style="margin-top:40px;">
      <div id="gpubars-view" style="width:1500px;height:400px;"></div>
      <div id="raw" style="font-family:Consolas,Monaco,monospace" ></div>
    </div>
    <script>
       //这里需要让程序的启停状态, 因此data没有写成函数
       var ip = "127.0.0.1";//server.py will automatically modify it!
       var port = 0;//server.py will automatically modify it!
       var app = new Vue({
         el:'#startbutton',
         data:{
           start: false,
           todo:"Start",
         },
         methods:{
           btnClick:function(){
                this.todo_original = this.todo;
                this.start = !this.start;
                if(!this.start)
                   this.todo = "Start";
                else
                   this.todo = "Stop";
                axios.post('/command', {
                  state: this.todo_original
                })
                .then(function (response) {
                 //alert(response);
                })
                .catch(function (error) {
                 console.log(error);
                 //alert("error");
                }); //axios  
           }, //end of btnClick
         },//end of methods
         
         created: function() {
            console.log("Starting connection to WebSocket Server")
            this.connection = new WebSocket("ws://" + ip + ":" + port + "/websocket")

            this.connection.onmessage = function(event) {
              var str = event.data;
              var obj = JSON.parse(str);
              console.log(obj.finish);
              if(obj.finish == "True"){
              /*
               If the Vue code is written as:
               `
               this.todo = "Start";
               this.start = false;
               `
               Then the website would not be rendered when the variables "todo" and "start" are updated!
              */
                app.todo = "Start";
                app.start = false; 
              }
            }

            this.connection.onopen = function(event) {
              //console.log("Successfully connected to the echo websocket server...")
            }

         } //end of created: function()
       }) //end of var app
       
       /*
       echart options...
       References:
       1. https://blog.csdn.net/m0_38134431/article/details/102707714 
       2. Official Documents of ECharts: https://www.uihtm.com/doc/echarts/doc/doc.html#Series
       */
       var options = {
         title:{
            text: 'GPU Monitor'
         },//title of the echarts
         
         tooltip: {
              trigger: 'axis',
              axisPointer: { // 坐标轴指示器，坐标轴触发有效
                type: 'shadow' // 默认为直线，可选为：'line' | 'shadow'
              },
              // 鼠标移入条形图提示层文字的自定义
              formatter (params) {
                let relVal = params[0].name
                for (var i = 0, l = params.length; i < l; i++) {
                  params[i].value = Math.abs(params[i].value)
                  relVal += '<br>'+params[i].seriesName + ' : ' + params[i].value + '%'
                }
                return relVal
              }
         }, //when a mouse is hovering over an echart.
         
         legend: {
              data: ['Memory-Util', 'GPU-Util']
         }, //legend
         
         grid: {
              left: '3%',
              right: '4%',
              bottom: '3%',
              containLabel: true
         },//grid
         
         xAxis: [
              {
                type: 'value',
                // 设置x轴线的属性
                axisLine: {
                  lineStyle: {
                    color: '#888'
                  }
                },
                max:100,
                min:-100,
                interval:10, 
                axisLabel: {
                  formatter (value) {
                    return Math.abs(value) // 负数取绝对值变正数（x轴本来数据是正负才能分开两边展示的，所以我们只是把负数处理为正数在视觉上显示）
                  }
                }
              }
         ], //end of xAxis
            
         yAxis: [
              {
                type: 'category',
                axisTick: {show: false},
                // 设置y轴线的属性
                axisLine: {
                  lineStyle: {
                    color: '#999'
                  }
                },
                data: ['3','2','1','0'] // y轴下到上
              }
         ], //end of yAxis
         
         color: ['#98d87d', '#49a9ee'],
         
         series:[{
                name: 'Memory-Util',
                type: 'bar',
                barMaxWidth: '22',
                stack: 'gpu',
                label: {
                  normal: {
                    show: true,
                    color: '#444',
                    align: 'left',
                    position:'left',
                    distance:20,
                    formatter (params) {
                      var htmlStr = Math.abs(params.data.value) + "%";
                      return htmlStr
                    } //formatter
                  } //normal
                }, //label
              data:[
                  {
                    value:-30,
                  },
                  {
                    value:-50,
                  },
                  {
                    value:-40,
                  },
                  {
                    value:-70,
                  },
              ] //end of data of series[0], Memory-Util
            }, //series[0]
            
           {
                name: 'GPU-Util',
                type: 'bar',
                barMaxWidth: '22',
                stack: 'gpu',
                label: {
                  normal: {
                    show: true,
                    color: '#444',
                    align: 'right',
                    position:'right',
                    distance:20,
                    formatter (params) {
                      var htmlStr = params.data.value + "%";
                      return htmlStr
                    } //formatter
                  } //normal
                }, //label
              data:[
                  {
                    value:40,
                  },
                  {
                    value:40,
                  },
                  {
                    value:40,
                  },
                  {
                    value:90,
                  },
              ]
            }, //end of data of series[1], GPU-Util
         ]//end of series
       } //end of options
       
       /* inject the echart options (var options) into the HTML */
       var id = 'gpubars-view';
       var state = 'view';
       var interval = 3000;
       
       /*
       The view mode
       */
       document.getElementById("raw").style.display = "none";
       var myChart = null; 
       
       var echart = new Vue({
         //Vue & axios polling: https://m.yisu.com/zixun/310294.html
         el:'#gpubars',
         mounted(){
           // polling...
           myChart = echarts.init(document.getElementById(id)); //echarts一定要在这里初始化
           this.getNewMessage();
           window.setInterval(() => {
             setTimeout(this.getNewMessage(), 0);
           }, interval);
         },
         
         methods: {
          getNewMessage: function() {
              axios.get('/gpu?adddiv=False&type='+state)
                .then(function (response) {
                  var data = response.data.view;
                  if(data instanceof String){
                      data = data.replace(/&amp;/g, "&")
                        .replace(/&lt;/g, "<")
                        .replace(/&gt;/g, ">")
                        .replace(/&quot;/g, "\"")
                        .replace(/&#039;/g, "'");
                  }
                 if(state == "raw")
                     document.getElementById("raw").innerHTML = data;
                 else if(state == "view"){
                     options.yAxis[0].data = data.y_data;
                     options.series[0].data = data.Memory_Util;
                     options.series[1].data = data.GPU_Util;
                     myChart.setOption(options);
                 }
                 
                })
                .catch(function (error) {
                 console.log(error);
                }); //axios 
          }//getNewMessage
         } //methods
       }) //var echart
       
        /*
        A jQuery & bootstrap switch https://blog.csdn.net/u013347241/article/details/51915821
        */
       $(document).ready(function() {
            $("#onoffswitch").on('click', function(){
                clickSwitch();
            });

            var clickSwitch = function() {
                if ($("#onoffswitch").is(':checked')) {
                    //switch from "VIEW" to RAW"
                    //console.log("RAW");
                    state = "raw";
                    document.getElementById("raw").style.display = "block";
                    document.getElementById("gpubars-view").style.display = "none";
                } else {
                    //switch from "RAW" to "VIEW"
                    //console.log("VIEW");
                    state = "view";
                    document.getElementById("raw").style.display = "none";
                    document.getElementById("gpubars-view").style.display = "block";
                }
            };
        });
    </script>
</body>